###############################################################################
 _        _______  ______   _______   _________ _______  _ 
( (    /|(  ___  )(  __  \ (  ____ \  \__    _/(  ____ \( )
|  \  ( || (   ) || (  \  )| (    \/     )  (  | (    \/| |
|   \ | || |   | || |   ) || (__         |  |  | (_____ | |
| (\ \) || |   | || |   | ||  __)        |  |  (_____  )| |
| | \   || |   | || |   ) || (           |  |        ) |(_)
| )  \  || (___) || (__/  )| (____/\  |\_)  )  /\____) | _ 
|/    )_)(_______)(______/ (_______/  (____/   \_______)(_)
                                                           
################################################################################

Course Details : Node.js Full Course for Beginners 
Tutor :  Dave grey, Youtube 
Published  :  December 3 2021 

#################################################################################

+-----------------------+
|    Introduction       |
+-----------------------+  

In this course, we would be going via topics than going through deep 
concepts. By this way, we will have subject knowledge on what is being 
learnt 

+-----------------------+
|    How node differs   |
+-----------------------+

- Runs in the server 
- This means the server will have a runtime environment. 
- Console would be node console. It would be in terminal / command prompt 
        console.log("Hello World")


+------------------------------------+
|    Global object vs Window Object  |
+------------------------------------+

- Global object is the runtime environment. Window object is the browser. 

        console.log("Hello World)
        console.log(global)

Hello World!
<ref *1> Object [global] {
  global: [Circular *1],
  clearInterval: [Function: clearInterval],
  clearTimeout: [Function: clearTimeout],
  setInterval: [Function: setInterval],
  setTimeout: [Function: setTimeout] {
    [Symbol(nodejs.util.promisify.custom)]: [Getter]
  },
  queueMicrotask: [Function: queueMicrotask],
  performance: Performance {
    nodeTiming: PerformanceNodeTiming {
      name: 'node',
      entryType: 'node',
      startTime: 0,
      duration: 400.14816600084305,
      nodeStart: 120.28114499896765,
      v8Start: 175.724365003407,
      bootstrapComplete: 359.1304709985852,
      environment: 250.2307410016656,
      loopStart: -1,
      loopExit: -1,
      idleTime: 0
    },
    timeOrigin: 1644758615694.229
  },
  clearImmediate: [Function: clearImmediate],
  setImmediate: [Function: setImmediate] {
    [Symbol(nodejs.util.promisify.custom)]: [Getter]
  }
}

+-------------------------+
| Common JS Modules - OS  |
+-------------------------+

- Common core modules are present in Node than JS 

//Common JS Modules

const os = require("os");
const path = require("path");


//Prints the linux version of the os
console.log(os.type());

//Prints the version of the operating system Again linux version
console.log(os.version());

//Prints the location of home directory
console.log(os.homedir());

//prints current directory Name
console.log(__dirname);

//prints the file name
console.log(__filename);

//Print the entire dir and path
console.log(path.dirname(__filename)); //Super useful!

//File base name. Remember prints only the file namer
console.log(path.basename(__filename));

//print the the file extension name
console.log(path.extname(__filename)); //Super useful

//Lets check what this is doing...
console.log(path.parse(__filename)); //Amazing. Throws and object full of the meta data

+-------------------------+
|    Custom Modulation    | 
+-------------------------+

math.js

const add = (a, b) => a + b;
const sub = (a, b) => a - b;
const mul = (a, b) => a * b;
const div = (a, b) => a / b;

//Object destructured export
module.exports = { add, sub, mul, div };

//you could also export like export.add = (a, b) => a + b

const math = require("./math");
console.log(math.add(2, 4));

//Destructured import

const { sub } = require("./math");
console.log(sub(2, 6));

Topics revised were 

- Node runtime introduction 
- Node vs vanilla javascript 
- gloab object vs window object 
- using common js modules , os and path modules
- exporting code via js files 
- custom modulations 

+------------------------------------------+
|    Create, Read and Update files in JS   | 
+------------------------------------------+

- the filesystem modules 


const fs = require("fs");
const path = require("path");
//Reading file

// Remember important notes when we wrote this function
// You could pass a utf-8 parameter to encode the data directly without converting to string
// Always the data read will be a buffer string!!!! <Buffer 48 69 2c 20 74 68 69 73 20 69 73 20 53 69 76 61>
// Unless you convert it, it aint going to pretty print it!!

//READING A FILE
fs.readFile(path.join(__dirname, "starter.txt"), "utf-8", (err, data) => {
  if (err) throw err;
  console.log(data);
});

console.log("Hello");

//WRITING A FILE
fs.writeFile(
  path.join(__dirname, "reply.txt"),
  "Writing text using node js is fun",
  (err, data) => {
    if (err) throw err;
    console.log("Operation Complete Write complete");
    //Appending
    fs.appendFile(
      path.join(__dirname, "reply.txt"),
      " Appended text",
      (err) => {
        if (err) throw err;
        console.log("Append Complete");
        //Renaming

        fs.rename(
          path.join(__dirname, "reply.txt"),
          path.join(__dirname, "new_reply.txt"),

          (err) => {
            if (err) throw err;
            console.log("Rename Complete");
          }
        );
      }
    );
  }
);

//APPENDING A FILE

//exit on uncaught errors
//process is an inbuilt module in node which helps in logging errors
process.on("uncaughtException", (err) => {
  console.error(`There was an uncaught error:${err}`);
  process.exit(1); //exit in 1 second?
});


There were 4 different ways in which we could read and write files 
- first would be the direct function call 
- the second would be a nested function call 
- the third would be asyc and await function to read, delete, append, unlink files etc 
- the fourth would be streaming input and output streaming the files 

In all these cases, streaming the files was the best way to deal with file management in 
node js. Rest all is repeatitive monotonous syntaxes 

+-----------------------------+
|    Node Package Manager...  | 
+-----------------------------+

difference between common js modules vs npm is that... 

npm was created by 3rd party coders 
npm also checks the standards of the code 
npm has almost all the code you wish to re-use 

Important concepts 
- code sharing is done via node package manager
- you could use nodemon to continually run your code with out rerun 


To make a npm package you will need to run the following command 

- npm init

this will download node modules to your folder 

after adding this you could check out the package.json and the package.lock.json 
- donot tamper with the package.lock.json 
- but the package.json could be modified to add some scripts
- you dont have to commit your entire node modules to git. Use a .gitIngore file instead 

To install a 3rd part npm package, simply call  

npm -i package-name 

example : npm install date-fns 

Now, packages come with different versions. You could refer the required version in the 
object destructure method during import as shown below 

const { v4: uuid } = require("uuid");

If you go an check your package.json post installation, you could see that the 
package is added in the dependencies. Along with this, you could see that there is a 
version added to it. 

on seeing this notation, you could understand that 
"^8.3.2"
where 8 is the main version, 2 is the subversion and it goes by 
the ^ symbol indicates that, you could have any other subversion if you need, 
but you should have only 8 as the main version. 

In package.json you could see that there is a script section 
where you could add scripts 

In this area, you could add scripts on 
- dev, prod and testing etc. 

if you need a dependency that should only be used in dev then 
you will need to run the below command with parameters 

- npm i package-name -D 
or 
- npm i package-name --save-dev  

Which will save the package and run it only for dev 

In Scripts, you could add the entry point for your code. 

start : "node index.js" will run the node file when you just type npm start 
dev : "nodemon index.js" will run the nodemon version of the file when you are running your code 

With this way, you could develop, code and add scripts using npm 

node, if you uninstall your package somewhere, accordingly you will need to remove that package 
reference in scripts 

+-------------------------------------+
|    Event Emitters and listeners...  | 
+-------------------------------------+

In this chapter I get to learn about event emitters and listeners. 

This would be the best way to explain what emitters are... 
I just googled it. 

EVENT EMITTERS (More like a commander or a orator) | Should be the celestials 
---------------

The EventEmitter is a module that facilitates communication/interaction between objects in Node. 
EventEmitter is at the core of Node asynchronous event-driven architecture. ... 
The concept is quite simple: emitter objects emit named events that cause previously registered listeners to be called.

LISTENERS (More like soldier or a audience who listens!) | should be the watchers 
---------

Much of the Node. js core API is built around an idiomatic asynchronous event-driven architecture in which certain 
kinds of objects (called "emitters") emit named events that cause Function objects ("listeners") to be called. ... 
All objects that emit events are instances of the EventEmitter class.


To initiate a emitter, call the emitter class, instantiate an object with that class. 


The below code... 

So what we are basically doing here is that we have a main file where we have a main program...
and the sub program which logs the time, an id and a message on running the file 
the log file and folder also automatically creates on loading... So this is cool. 


Index.js : 

const logEvents = require("./logEvents");

const EventEmitter = require("events");

class MyEmitter extends EventEmitter {}  //Instantiation happens here. 

//initialize object
const myEmitter = new MyEmitter();

//add a listner for the log event
myEmitter.on("log", (msg) => logEvents(msg));  

setTimeout(() => {
  //emit the event
  myEmitter.emit("log", "Log event emitted");
}, 2000);


const { format } = require("date-fns");
const { v4: uuid } = require("uuid");

const fs = require("fs");
const path = require("path");
const fsPromises = require("fs").promises;

const logEvents = async (message) => {
  const dateTime = `${format(new Date(), "yyyy-MM-dd\tHH:mm:ss")}`;
  const logItem = `${dateTime}\t${uuid()}\t${message}\n`;
  console.log(logItem);
  try {
    if (!fs.existsSync(path.join(__dirname, "logs"))) {
      await fsPromises.mkdir(path.join(__dirname, "logs"));
    }
    //testing now again...again...and again...
    await fsPromises.appendFile(
      path.join(__dirname, "logs", "eventlogs.txt"),
      logItem
    );
  } catch (err) {
    console.log(err);
  }
};

module.exports = logEvents;

+-------------------------------------+
|    Building a server with Node....  | 
+-------------------------------------+

Loads of things in this lesson to unpack. To begin with we need an emitter, that 
shares the type of file and a switch statement to check the file type. Along with this 
we also need to know the file path of this variable. 

start with importing http module, path module, filesystem and filesystem.promises and logEvents and EventEmitter... 
Finally you would need to add port to your server 

const PORT = process.env.PORT || 3500

after Adding the port, you would need to add the server function 
pass request and response as your parameters 
add an emitter which logs your changes in a log.txt file 
to get the extension of the file, use the filesystem module and get the extension of your file using the extname function 

determine your file type using the file extension method. I know this code is not the ideal one for today's standards. 
But this code will help in building a simple server 

 const extension = path.extname(req.url); //get the url name using this

  //Identifying the type of file in the request url

  let contentType;

  switch (extension) {
    case ".css":
      contentType = "text/css";
      break;
    case ".js":
      contentType = "text/javascript";
      break;
    case ".json":
      contentType = "application/json";
      break;
    case ".jpeg":
      contentType = "image/jpeg";
      break;
    case ".png":
      contentType = "image/png";
      break;
    case ".txt":
      contentType = "text/plain";
      break;
    default:
      contentType = "text/html";
  }

File Path determination... This would help in determin the path and its extension. 
It also helps in confirming the file extension 

 //file path determination
  let filePath =
    contentType === "text/html" && req.url == "/"
      ? path.join(__dirname, "views", "index.html")
      : contentType === "text/html" && req.url.slice(-1) === "/"
      ? path.join(__dirname, "views", req.url, "index.html")
      : contentType === "text/html"
      ? path.join(__dirname, "views", req.url)
      : path.join(__dirname, req.url);

If a file path exists / file exists without "/" you just need to add .html to it since you are unable to find its 
content type 

  if (!extension && req.url.slice(-1) !== "/") {
    filePath += ".html";
  }


Once you get the file path, serve the file! 

  const fileExists = fs.existsSync(filePath);
  if (fileExists) {
    //serve the file
    serveFile(filePath, contentType, res);
  } else {
    //404
    //301 -  redirect!
    switch (path.parse(filePath).base) {
      case "old-page.html":
        res.writeHead(301, { Location: "/new-page.html" });
        res.end();
        break;
      case "www-page.html":
        res.writeHead(301, { Location: "/" });
        res.end();
        break;
      default:
        serveFile(path.join(__dirname, "views", "404.html"), "text/html", res);
    }
  }
});

//Make the server listening to port 3500
server.listen(PORT, () => console.log(`Server running on port ${PORT}`));

const serveFile = async (filePath, contentType, response) => {
  try {
    const rawData = await fsPromises.readFile(
      filePath,
      !contentType.includes("image") ? "utf8" : ""
    );
    const data =
      contentType === "application/json" ? JSON.parse(rawData) : rawData;
    response.writeHead(filePath.includes("404.html") ? 404 : 200, {
      "Content-Type": contentType,
    });
    response.end(
      contentType === "application/json" ? JSON.stringify(data) : data
    );
  } catch (err) {
    console.log(err);
    myEmitter.emit("log", `${err.name}\t${err.message}`, "reqLog.txt");
    response.statusCode = 500;
    response.end();
  }
};